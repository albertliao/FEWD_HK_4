// Execute after the DOM is ready.
// $(function(){}) = $(document).ready(function(){})
// Reference: http://learn.jquery.com/using-jquery-core/document-ready/
$(function(){

	// The anonymous function on the right hand side contains all the game logic.
	// At the end, it will return a object instance which contains all the game logic and save is to a global variable
	// called memeory. The left hand side of the assignment.
	memory = (function () {

		var $deck = $('#game-cards'), // The jquery object of #game-cards
			counter = 0,								// Counter for number of moves
			challenge;                 	// The first selected card by user

		// configuration settings
		var config = {
			cardPlaceholder : "<div><span></span></div>", // The html representing 1 card
			pairs : 20,																		// The number of pair u in the game deck
			cardHeight : 98,															// The height of each card for calculating the background-position
			cardWidth : 73,																// The width of each card for calculating the background-position
			suits : 4,																		// The number of suits in 1 deck
			ranks : 13,																		// The number of cards in 1 suit
			cheat : false																	// Default cheat mode is off
		}
		
		// Initialize the game
		var init = function (options) {
  		for(var prop in options) {
				if(options.hasOwnProperty(prop)){
					config[prop] = options[prop];
    		}
  		}

  		// Create the deck which contains the emtpy cardPlaceholders above
			var blanks = construct();

			// Prepare the deck but no cards are assigned
			$deck.empty().append(blanks);

			// Assign the cardPlaceholders with cards
			deal(shuffle(double(cut(cards()))));
    }
		
		// Event handler for click on the card
		$deck.on('click','div > span, .unmatched', function(){
			// If it is the first card being clicked, execute reveal() to determine w
			// If it is the second card being clicked, execute check()
			isPair() ? reveal($(this)) : check($(this)); 
		})

		// Event handlers for click on each control button
		$('#game-control-buttons').on('click','button',function(){
			memory[$(this).attr('id')]();
		})

		// Event handler for cheat mode
		$('#cheat').on('change',function(){
			$('.cheat').removeClass("cheat");
			config.cheat = config.cheat ? false : true;
		})

		// Assign the cards on cardPlaceholders
		function deal(cards){
			$deck.find('div').each(function(i,card){
				$(card).css('background-position', cards[i])
			})
		}

		// The deck generated by the cards() contains 52, this function reduce it to the number of pairs base on the config setting
		function cut(deck){
			return deck.slice(0,config.pairs);
		}

		// After the cut(), we need to double the cards for matching
		function double(deck){
			return deck.concat(deck);
		}

		// Prepare the cards, each card has it owns background position
		function cards(){
			var i = config.suits,
				cards = [];
			while(i--){
				var j = config.ranks;
				while(j--){
					cards.push( '-' + (j * config.cardWidth + 1) + 'px -' + (i * config.cardHeight +1)+ 'px')
				}
			}
			// return an array containing the background positions of all 52 cards
			return cards;
		}

		function isPair(){
			// return true if the number of flipped cards is a odd number
			return $deck.find('span').length % 2 == false;
		}

		// Execute when the first card is clicked
		function reveal(card){
			console.log("reveal");
			challenge = card.is('span') ? card.parent('div') : card
			resetUnmatched();
			flip(challenge);
			if (config.cheat){
				// if cheat mode is on, make the matched card bigger
				cheat(challenge);
			}
		}

    // Check if the flipped pair is matched
		function check(card){
			var response = card.parent();
			// challenge is the first flipped card and response is the 2nd card selected by user
			var match = compare(challenge, response);
			// flipe the 2nd card
			flip(response);
			// mark the result
			markCards([challenge, response], match);
		}

		// compare if the 2 card has the same background position, return true if they are matched
		function compare(a, b){
			var bg = 'background-position';
			return a.css(bg) == b.css(bg);
		}

		// If the card is already flipped, flip it down. Otherwise, flip it up.
		function flip(card){
			$(card).has('span').length ? flipUp(card) : flipDown(card)
		}

		// Flip up the card
		function flipUp(card){
			$(card).find('span').remove();
		}

		// Flip down the card
		function flipDown(card){
			$('<span>').appendTo(card);
		}

		// Mark the flipped pair is match or not by adding a class
		function markCards(pair, match){
			var status = match ? 'matched' : 'unmatched';
			pair.forEach(function(e,i){
				e.addClass(status);
			})
			// Incremen the number of move
			keepScore();
		}

		// Keep tracking the number of move and if all cards are flipped, show the result
		function keepScore(){
			counter++;
			if($deck.find('span').length === 0){
				$('#gameOver').show();
				$('#number-of-moves').text(counter);
			}
		}

    // Execute when cheat mode is on
		function cheat(card){
			// Check each card and compare it, if it is the match the challenge card, add the cheat class which makes it bigger
			$(card).siblings().not(this).each(function(i,e){
				var inspect = $(e); // loop through all the card and name each one as inspect
				if (compare(card, inspect)){
					inspect.addClass("cheat")
				};
			})	
		}

		// Event handler for the reset button clicked which will reset the game
		function reset(){
			init();
		}

		// Flip down all the unmatched cards
		function resetUnmatched(){
			$('.unmatched').each(function(){
				$(this).removeClass("unmatched");
				flip(this);
			})
		}

    // Create the deck. The number of pairs in the deck depends on the config settings.
		function construct(){
			var result = "";
			var i = config.pairs * 2;
			while(i--){
				result = result + config.cardPlaceholder;
			}

			// return the number of cards' placeholder html which is <div><span></span></div> * n
			return result;
		}

    // A function for shuffling the cards
    // o is an array and this function will reorder the items randomly
		function shuffle(o){
		    for(var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
		    return o;
		};

		// return the game logic to the global variable memory
		return {
			init:init,
			reset:reset,
			start:start
		};
	}());	

  // Init the game for 2 pairs, if you want to have more cards in the deck, increase the number. Default is 20.
	memory.init({'pairs':2});

})
